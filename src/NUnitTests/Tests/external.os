// ----------------------------------------------------------
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/xsltlib/
// ----------------------------------------------------------

// #Использовать "build"

Перем юТест;
Перем ТекущийКаталог;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_СоздатьКомпоненту");
	ВсеТесты.Добавить("ТестДолжен_УстановитьСтилиИзСтроки");
	ВсеТесты.Добавить("ТестДолжен_УстановитьСтилиИзФайла");
	ВсеТесты.Добавить("ТестДолжен_УстановитьСтилиИзУзла");
	ВсеТесты.Добавить("ТестДолжен_ДобавитьПараметр");
	ВсеТесты.Добавить("ТестДолжен_УдалитьПараметр");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьПреобразованиеИзСтроки");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьПреобразованиеИзФайла");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьПреобразованиеИзУзла");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьПреобразованиеСПараметрами");

	ПередЗапускомТестов();

	Возврат ВсеТесты;

КонецФункции // ПолучитьСписокТестов()

Процедура ПередЗапускомТестов()

	ТекущийКаталог = ПолучитьПеременнуюСреды("OSC_TEST_CWD");
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = ТекущийСценарий().Каталог;
	КонецЕсли;

	Сообщить(СтрШаблон("Текущий каталог: %1", ТекущийКаталог));

	ПутьККомпоненте = ПолучитьПеременнуюСреды("OSC_TEST_LIB");
	Если НЕ ЗначениеЗаполнено(ПутьККомпоненте) Тогда
		ПутьККомпоненте = ОбъединитьПути(ТекущийКаталог, "src", "xsltlib", "bin");
		ПутьККомпоненте = ОбъединитьПути(ПутьККомпоненте, "Debug", "net452", "xsltlib.dll");
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту(ПутьККомпоненте);
		Сообщить("Компонента подключена.");
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(СтрШаблон("Ошибка подключения компоненты:%1%2", Символы.ПС, ТекстОшибки));
	КонецПопытки;

КонецПроцедуры // ПередЗапускомТестов()

Процедура ТестДолжен_СоздатьКомпоненту() Экспорт

	Преобразование = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(Преобразование),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать объект ПреобразованиеXSL"); 

КонецПроцедуры // ТестДолжен_СоздатьКомпоненту()

Процедура ТестДолжен_УстановитьСтилиИзСтроки() Экспорт

	Преобразование = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(Преобразование),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать объект ПреобразованиеXSL"); 

	Шаблон = ШаблонПреобразования();

	Попытка
		Преобразование.ЗагрузитьТаблицуСтилейXSLИзСтроки(Шаблон);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось добавить загрузить таблицу стилей из строки %1""%2"":%1%3",
		                            Символы.ПС,
		                            Шаблон,
		                            ТекстОшибки);
	КонецПопытки;

КонецПроцедуры // ТестДолжен_УстановитьСтилиИзСтроки()

Процедура ТестДолжен_УстановитьСтилиИзФайла() Экспорт

	Преобразование = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(Преобразование),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать объект ПреобразованиеXSL"); 

	Шаблон = ШаблонПреобразования();

	ПутьКТестовомуКаталогу = ОбъединитьПути(ТекущийКаталог, "test");
	ОбеспечитьКаталог(ПутьКТестовомуКаталогу);

	ИмяТестовогоФайла = "transformTemplate1.xslt";
	ПутьКФайлу = ОбъединитьПути(ПутьКТестовомуКаталогу, ИмяТестовогоФайла);

	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст(Шаблон);
	Текст.Записать(ПутьКФайлу, КодировкаТекста.UTF8);

	Попытка
		Преобразование.ЗагрузитьТаблицуСтилейXSLИзФайла(ПутьКФайлу);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось добавить загрузить таблицу стилей из файла ""%1"":%2%3",
		                            ПутьКФайлу,
		                            Символы.ПС,
		                            ТекстОшибки);
	КонецПопытки;

КонецПроцедуры // ТестДолжен_УстановитьСтилиИзФайла()

Процедура ТестДолжен_ДобавитьПараметр() Экспорт

	Преобразование = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(Преобразование),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать объект ПреобразованиеXSL"); 

	ИмяПараметра = "testParam";
	ЗначениеПараметра = "items";
	Попытка
		Преобразование.ДобавитьПараметр(ИмяПараметра, ЗначениеПараметра);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось добавить параметр ""%1"" со значением ""%2"":%3%4",
		                            ИмяПараметра,
		                            ЗначениеПараметра,
		                            Символы.ПС,
		                            ТекстОшибки);
	КонецПопытки;

КонецПроцедуры // ТестДолжен_ДобавитьПараметр()

Процедура ТестДолжен_УдалитьПараметр() Экспорт

	Преобразование = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(Преобразование),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать объект ПреобразованиеXSL"); 

	ИмяПараметра = "testParam";
	ЗначениеПараметра = "items";

	Попытка
		Преобразование.ДобавитьПараметр(ИмяПараметра, ЗначениеПараметра);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось добавить параметр ""%1"" со значением ""%2"":%3%4",
		                            ИмяПараметра,
		                            ЗначениеПараметра,
		                            Символы.ПС,
		                            ТекстОшибки);
	КонецПопытки;

	Попытка
		Преобразование.УдалитьПараметр(ИмяПараметра);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось удалить параметр ""%1"":%2%3",
		                            ИмяПараметра,
		                            Символы.ПС,
		                            ТекстОшибки);
	КонецПопытки;

КонецПроцедуры // ТестДолжен_УдалитьПараметр()

Процедура ТестДолжен_ВыполнитьПреобразованиеИзСтроки() Экспорт

	Преобразование = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(Преобразование),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать объект ПреобразованиеXSL"); 

	Шаблон = ШаблонПреобразования();
	ИсходныеДанные = СтрокаДляПреобразования();
	ТестоваяСтрока = "<new>item3</new>";

	Попытка
		Преобразование.ЗагрузитьТаблицуСтилейXSLИзСтроки(Шаблон);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось добавить загрузить таблицу стилей из строки %1""%2"":%1%3",
		                            Символы.ПС,
		                            Шаблон,
		                            ТекстОшибки);
	КонецПопытки;

	Попытка
		Результат = Преобразование.ПреобразоватьИзСтроки(ИсходныеДанные);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось выполнить преобразование строки %1""%2""%1 по шаблону %1""%3"":%1%4",
		                            Символы.ПС,
		                            ИсходныеДанные,
		                            Шаблон,
		                            ТекстОшибки);
	КонецПопытки;

	ТекстОшибки = СтрШаблон("Не удалось выполнить преобразование строки %1""%2""%1 по шаблону %1""%3""",
	                        Символы.ПС,
	                        ИсходныеДанные,
	                        Шаблон);
	юТест.ПроверитьРавенство(СокрЛП(Результат),	ТестоваяСтрока, ТекстОшибки); 

КонецПроцедуры // ТестДолжен_ВыполнитьПреобразованиеИзСтроки()

Процедура ТестДолжен_ВыполнитьПреобразованиеИзФайла() Экспорт

	Преобразование = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(Преобразование),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать объект ПреобразованиеXSL"); 

	Шаблон = ШаблонПреобразования();
	ИсходныеДанные = СтрокаДляПреобразования();
	ТестоваяСтрока = "<new>item3</new>";

	ПутьКТестовомуКаталогу = ОбъединитьПути(ТекущийКаталог, "test");
	ОбеспечитьКаталог(ПутьКТестовомуКаталогу);

	ИмяТестовогоФайла = "testFile1.xml";
	ПутьКФайлу = ОбъединитьПути(ПутьКТестовомуКаталогу, ИмяТестовогоФайла);

	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст(ИсходныеДанные);
	Текст.Записать(ПутьКФайлу, КодировкаТекста.UTF8);

	Попытка
		Преобразование.ЗагрузитьТаблицуСтилейXSLИзСтроки(Шаблон);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось добавить загрузить таблицу стилей из строки %1""%2"":%1%3",
		                            Символы.ПС,
		                            Шаблон,
		                            ТекстОшибки);
	КонецПопытки;

	Попытка
		Результат = Преобразование.ПреобразоватьИзФайла(ПутьКФайлу);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось выполнить преобразование файла ""%1"" по шаблону %2""%3"":%2%4",
		                            ПутьКФайлу,
		                            Символы.ПС,
		                            Шаблон,
		                            ТекстОшибки);
	КонецПопытки;

	ТекстОшибки = СтрШаблон("Не удалось выполнить преобразование файла ""%1"" по шаблону %2""%3""",
	                        ПутьКФайлу,
	                        Символы.ПС,
	                        Шаблон);
	юТест.ПроверитьРавенство(СокрЛП(Результат),	ТестоваяСтрока, ТекстОшибки); 

КонецПроцедуры // ТестДолжен_ВыполнитьПреобразованиеИзФайла()

Процедура ТестДолжен_ВыполнитьПреобразованиеСПараметрами() Экспорт

	Преобразование = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(Преобразование),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать объект ПреобразованиеXSL"); 

	Шаблон = ШаблонПреобразованияСПараметром();
	ИсходныеДанные = СтрокаДляПреобразования();
	ТестоваяСтрока = "<new>items\item3</new>";
	ИмяПараметра = "testParam";
	ЗначениеПараметра = "items";

	Попытка
		Преобразование.ЗагрузитьТаблицуСтилейXSLИзСтроки(Шаблон);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось добавить загрузить таблицу стилей из строки %1""%2"":%1%3",
		                            Символы.ПС,
		                            Шаблон,
		                            ТекстОшибки);
	КонецПопытки;

	Попытка
		Преобразование.ДобавитьПараметр(ИмяПараметра, ЗначениеПараметра);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось добавить параметр ""%1"" со значением ""%2"":%3%4",
		                            ИмяПараметра,
		                            ЗначениеПараметра,
		                            Символы.ПС,
		                            ТекстОшибки);
	КонецПопытки;

	Попытка
		Результат = Преобразование.ПреобразоватьИзСтроки(ИсходныеДанные);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Не удалось выполнить преобразование строки %1""%2""%1 по шаблону %1""%3"":%1%4",
		                            Символы.ПС,
		                            ИсходныеДанные,
		                            Шаблон,
		                            ТекстОшибки);
	КонецПопытки;

	ТекстОшибки = СтрШаблон("Не удалось выполнить преобразование строки %1""%2""%1 по шаблону %1""%3""",
	                        Символы.ПС,
	                        ИсходныеДанные,
	                        Шаблон);
	юТест.ПроверитьРавенство(СокрЛП(Результат),	ТестоваяСтрока, ТекстОшибки); 

КонецПроцедуры // ТестДолжен_ВыполнитьПреобразованиеСПараметрами()

Процедура ОбеспечитьКаталог(ПутьККаталогу)

	ВремКаталог = Новый Файл(ПутьККаталогу);
	Если НЕ (ВремКаталог.Существует() И ВремКаталог.ЭтоКаталог()) Тогда
		СоздатьКаталог(ПутьККаталогу);
	КонецЕсли;

КонецПроцедуры // ОбеспечитьКаталог()

Функция СтрокаДляПреобразования()

	Возврат "<?xml version = ""1.0"" encoding=""UTF-8""?>
	        |
	        |<root>
	        |  <item>item1</item>
	        |  <item>item2</item>
	        |  <item>item3</item>
	        |</root>";

КонецФункции // СтрокаДляПреобразования()

Функция ШаблонПреобразования()

	Возврат "<?xml version = ""1.0"" encoding=""UTF-8""?>
	        |
	        |<xsl:stylesheet version = ""3.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
	        |  <xsl:output method=""xml"" indent=""yes"" />
	        |  <xsl:template match="" / "">
	        |    <new>
	        |      <xsl:value-of select=""/root/item[last()]""/>
	        |    </new>
	        |  </xsl:template>
	        |</xsl:stylesheet>";

КонецФункции // ШаблонПреобразования()

Функция ШаблонПреобразованияСПараметром()

	Возврат "<?xml version = ""1.0"" encoding=""UTF-8""?>
	        |
	        |<xsl:stylesheet version = ""3.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
	        |  <xsl:param name=""testParam"" />
	        |  <xsl:output method=""xml"" indent=""yes"" />
	        |  <xsl:template match="" / "">
	        |    <new>
	        |      <xsl:variable name=""item"" select=""/root/item[last()]""/>
	        |      <xsl:value-of select=""concat($testParam, '\', $item)""/>
	        |    </new>
	        |  </xsl:template>
	        |</xsl:stylesheet>";

КонецФункции // ШаблонПреобразованияСПараметром()