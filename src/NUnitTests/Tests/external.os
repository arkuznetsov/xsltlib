// ----------------------------------------------------------
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/xsltlib/
// ----------------------------------------------------------

// #Использовать "build"

Перем юТест;
Перем ТекущийКаталог;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_СоздатьКомпоненту");
	ВсеТесты.Добавить("ТестДолжен_УстановитьСтилиИзСтроки");
	ВсеТесты.Добавить("ТестДолжен_УстановитьСтилиИзФайла");
	ВсеТесты.Добавить("ТестДолжен_ДобавитьПараметр");
	ВсеТесты.Добавить("ТестДолжен_УдалитьПараметр");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьПреобразованиеИзСтроки");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьПреобразованиеИзФайла");
	ВсеТесты.Добавить("ТестДолжен_ВыполнитьПреобразованиеСПараметрами");

	ПередЗапускомТестов();

	Возврат ВсеТесты;

КонецФункции // ПолучитьСписокТестов()

Процедура ПередЗапускомТестов()

	ТекущийКаталог = ПолучитьПеременнуюСреды("OSC_TEST_CWD");
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = ТекущийСценарий().Каталог;
	КонецЕсли;

	ПутьККомпоненте = ПолучитьПеременнуюСреды("OSC_TEST_LIB");
	Если НЕ ЗначениеЗаполнено(ПутьККомпоненте) Тогда
		ПутьККомпоненте = ОбъединитьПути(ТекущийКаталог, "src", "xsltlib", "bin");
		ПутьККомпоненте = ОбъединитьПути(ПутьККомпоненте, "Debug", "net452", "xsltlib.dll");
	КонецЕсли;

	Попытка
		ПодключитьВнешнююКомпоненту(ПутьККомпоненте);
		Сообщить("Компонента подключена.");
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(СтрШаблон("Ошибка подключения компоненты:%1%2", Символы.ПС, ТекстОшибки));
	КонецПопытки;

КонецПроцедуры // ПередЗапускомТестов()

Процедура ТестДолжен_СоздатьКомпоненту() Экспорт

	ИзвлечениеДанных = Новый ПреобразованиеXSL();
	юТест.ПроверитьРавенство(ТипЗнч(ИзвлечениеДанных),
	                         Тип("ПреобразованиеXSL"),
	                         "Не удалось создать компоненту ПреобразованиеXSL"); 

КонецПроцедуры // ТестДолжен_СоздатьКомпоненту()
